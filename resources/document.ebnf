Document = Definition+
Definition = TypeSystemExtension /
             TypeSystemDefinition /
             ExecutableDefinition
TypeSystemExtension = SchemaExtension |
                      TypeExtension
SchemaExtension = (<'extend'> <WhiteSpace*> <'schema'> Directives? <WhiteSpace*> <'{'> OperationTypeDefinition+ <WhiteSpace*> <'}'>) |
                  (<'extend'> <WhiteSpace*> <'schema'> Directives)
OperationTypeDefinition = <WhiteSpace*> OperationType <':'> <WhiteSpace*> NamedType
TypeExtension = ScalarTypeExtension |
                ObjectTypeExtension |
                InterfaceTypeExtension |
                UnionTypeExtension |
                EnumTypeExtension |
                InputObjectTypeExtension
ScalarTypeExtension = <'extend'> <WhiteSpace*> <'scalar'> <WhiteSpace*> Name Directives
ObjectTypeExtension = (<'extend'> <WhiteSpace*> <'type'> <WhiteSpace*> Name ImplementsInterfaces? Directives? FieldsDefinition) |
                      (<'extend'> <WhiteSpace*> <'type'> <WhiteSpace*> Name ImplementsInterfaces? Directives) |
                      (<'extend'> <WhiteSpace*> <'type'> <WhiteSpace*> Name ImplementsInterfaces)
InterfaceTypeExtension = (<'extend'> <WhiteSpace*> <'interface'> <WhiteSpace*> Name Directives? FieldsDefinition) |
                         (<'extend'> <WhiteSpace*> <'interface'> <WhiteSpace*> Name Directives)
UnionTypeExtension = (<'extend'> <WhiteSpace*> <'union'> <WhiteSpace*> Name Directives? UnionMemberTypes) |
                     (<'extend'> <WhiteSpace*> <'union'> <WhiteSpace*> Name Directives)
EnumTypeExtension = (<'extend'> <WhiteSpace*> <'enum'> <WhiteSpace*> Name Directives? EnumValuesDefinition) |
                    (<'extend'> <WhiteSpace*> <'enum'> <WhiteSpace*> Name Directives)
InputObjectTypeExtension = (<'extend'> <WhiteSpace*> <'input'> <WhiteSpace*> Name Directives? InputFieldsDefinition) |
                           (<'extend'> <WhiteSpace*> <'input'> <WhiteSpace*> Name Directives)
ExecutableDefinition = OperationDefinition |
                       FragmentDefinition
TypeSystemDefinition = SchemaDefinition |
                       TypeDefinition |
                       DirectiveDefinition
SchemaDefinition = <'schema'> Directives? <WhiteSpace*> <'{'> RootOperationTypeDefinition+ <WhiteSpace*> <'}'>
RootOperationTypeDefinition = <WhiteSpace*> OperationType <':'> <WhiteSpace*> NamedType
TypeDefinition = ScalarTypeDefinition |
                 ObjectTypeDefinition |
                 InterfaceTypeDefinition |
                 UnionTypeDefinition |
                 EnumTypeDefinition |
                 InputObjectTypeDefinition
ScalarTypeDefinition = Description? <WhiteSpace*> <'scalar'> <WhiteSpace+> Name Directives?
ObjectTypeDefinition = Description? <WhiteSpace*> <'type'> <WhiteSpace+> Name ImplementsInterfaces? Directives? FieldsDefinition?
InterfaceTypeDefinition = Description? <WhiteSpace*> <'interface'> <WhiteSpace+> Name Directives? FieldsDefinition?
UnionTypeDefinition = Description? <WhiteSpace*> <'union'> <WhiteSpace+> Name Directives? UnionMemberTypes?
EnumTypeDefinition = Description? <WhiteSpace*> <'enum'> <WhiteSpace+> Name Directives? EnumValuesDefinition?
InputObjectTypeDefinition = Description? <WhiteSpace*> <'input'> <WhiteSpace+> Name Directives? InputFieldsDefinition?
DirectiveDefinition = Description? <WhiteSpace*> <'directive'> <WhiteSpace*> <'@'> Name <WhiteSpace*> ArgumentsDefinition? <WhiteSpace*> <'on'> <WhiteSpace*> DirectiveLocations
ArgumentsDefinition = <'('> InputValueDefinition+ <')'>
DirectiveLocations = (<'|'?> <WhiteSpace*> DirectiveLocation) |
                     (DirectiveLocations <WhiteSpace*> <'|'> <WhiteSpace*> DirectiveLocation)
DirectiveLocation = ExecutableDirectiveLocation |
                    TypeSystemDirectiveLocation
ExecutableDirectiveLocation = 'QUERY' |
                              'MUTATION' |
                              'SUBSCRIPTION' |
                              'FIELD' |
                              'FRAGMENT_DEFINITION' |
                              'FRAGMENT_SPREAD' |
                              'INLINE_FRAGMENT'
TypeSystemDirectiveLocation = 'SCHEMA' |
                              'SCALAR' |
                              'OBJECT' |
                              'FIELD_DEFINITION' |
                              'ARGUMENT_DEFINITION' |
                              'INTERFACE' |
                              'UNION' |
                              'ENUM' |
                              'ENUM_VALUE' |
                              'INPUT_OBJECT' |
                              'INPUT_FIELD_DEFINITION'
Description = StringValue
FieldsDefinition = <WhiteSpace*> <'{'> FieldDefinition+ <WhiteSpace*> <'}'>
FieldDefinition = <WhiteSpace*> Description? <WhiteSpace*> Name <':'> Type Directives?
ImplementsInterfaces = (<WhiteSpace*> <'implements'> <WhiteSpace*> <'&'?> <WhiteSpace*> NamedType) |
                       (ImplementsInterfaces <WhiteSpace*> <'&'> <WhiteSpace*> NamedType)
UnionMemberTypes = (<WhiteSpace*> <'='> <WhiteSpace*> <'|'?> <WhiteSpace*> NamedType) |
                   (UnionMemberTypes <WhiteSpace*> <'|'> <WhiteSpace*> NamedType)
EnumValuesDefinition = <WhiteSpace*> <'{'> EnumValueDefinition+ <WhiteSpace*> <'}'>
EnumValueDefinition = <WhiteSpace*> Description? <WhiteSpace*> EnumValue Directives?
InputFieldsDefinition = <WhiteSpace*> <'{'> InputValueDefinition+ <WhiteSpace*> <'}'>
InputValueDefinition = <WhiteSpace*> Description? <WhiteSpace*> Name <':'> Type DefaultValue? Directives?
OperationDefinition = (OperationType <WhiteSpace*> Name? VariableDefinitions? Directives? SelectionSet) |
                      SelectionSet
FragmentDefinition = <'fragment'> <WhiteSpace+> FragmentName <WhiteSpace+> TypeCondition Directives? SelectionSet
OperationType = 'query' | 'mutation' | 'subscription'
VariableDefinitions = <'('> VariableDefinition+ <')'>
VariableDefinition = <WhiteSpace*> Variable <':'> Type DefaultValue?
SelectionSet = <WhiteSpace*> <'{'> <WhiteSpace*> Selection+ <WhiteSpace*> <'}'>
Selection = Field |
            FragmentSpread |
            InlineFragment
Field = <WhiteSpace*> Alias? <WhiteSpace*> Name Arguments? Directives? SelectionSet?
Alias = <WhiteSpace*> Name <WhiteSpace*> <':'>
Arguments = <'('> Argument+ <')'>
Argument = <WhiteSpace*> Name <':'> Value <Comma*>
Value = <WhiteSpace*> (Variable |
                       IntValue |
                       FloatValue |
                       StringValue |
                       BooleanValue |
                       NullValue |
                       EnumValue)
Variable = <'$'> Name
DefaultValue = <WhiteSpace*> <'='> Value
EnumValue = #"^(?!(true|false|null))[_A-Za-z][_0-9A-Za-z]*"
Directives = Directive+
Directive = <WhiteSpace*> <'@'> Name Arguments?
FragmentSpread = <WhiteSpace*> <'...'> <WhiteSpace*> FragmentName Directives?
FragmentName = #"^(?!on)[_A-Za-z][_0-9A-Za-z]*"
InlineFragment = <'...'> TypeCondition? Directives? SelectionSet
TypeCondition = <WhiteSpace*> <'on'> <WhiteSpace*> NamedType
Type = <WhiteSpace*> (NamedType |
                      ListType |
                      NonNullType)
NamedType = Name
ListType = <'['> Type <']'>
NonNullType = NamedType <'!'> |
              ListType <'!'>
