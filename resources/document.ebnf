Document = Definition+
Definition = TypeSystemDefinition /
             ExecutableDefinition
ExecutableDefinition = OperationDefinition |
                       FragmentDefinition
TypeSystemDefinition = SchemaDefinition |
                       TypeDefinition
SchemaDefinition = <'schema'> Directives? <'{'> RootOperationTypeDefinition+ <'}'>
RootOperationTypeDefinition = <WhiteSpace*> OperationType <':'> NamedType
TypeDefinition = ScalarTypeDefinition |
                 ObjectTypeDefinition |
                 InterfaceTypeDefinition |
                 UnionTypeDefinition |
                 EnumTypeDefinition
ScalarTypeDefinition = Description? <WhiteSpace*> <'scalar'> <WhiteSpace+> Name Directives?
ObjectTypeDefinition = Description? <WhiteSpace*> <'type'> <WhiteSpace+> Name ImplementsInterfaces? Directives? FieldsDefinition?
InterfaceTypeDefinition = Description? <WhiteSpace*> <'interface'> <WhiteSpace+> Name Directives? FieldsDefinition?
UnionTypeDefinition = Description? <WhiteSpace*> <'union'> <WhiteSpace+> Name Directives? UnionMemberTypes?
EnumTypeDefinition = Description? <WhiteSpace*> <'enum'> <WhiteSpace+> Name Directives? EnumValuesDefinition?
Description = StringValue
FieldsDefinition = <'{'> FieldDefinition+ <'}'>
FieldDefinition = <WhiteSpace*> Description? <WhiteSpace*> Name <':'> Type Directives?
ImplementsInterfaces = (<WhiteSpace*> <'implements'> <WhiteSpace*> <'&'?> <WhiteSpace*> NamedType) |
                       (ImplementsInterfaces <WhiteSpace*> <'&'> <WhiteSpace*> NamedType)
UnionMemberTypes = (<WhiteSpace*> <'='> <WhiteSpace*> <'|'?> <WhiteSpace*> NamedType) |
                   (UnionMemberTypes <WhiteSpace*> <'|'> <WhiteSpace*> NamedType)
EnumValuesDefinition = <'{'> EnumValueDefinition+ <'}'>
EnumValueDefinition = <WhiteSpace*> Description? <WhiteSpace*> EnumValue Directives?
OperationDefinition = (OperationType <WhiteSpace*> Name? VariableDefinitions? Directives? SelectionSet) |
                      SelectionSet
FragmentDefinition = <'fragment'> <WhiteSpace+> FragmentName <WhiteSpace+> TypeCondition Directives? SelectionSet
OperationType = 'query' | 'mutation' | 'subscription'
VariableDefinitions = <'('> VariableDefinition+ <')'>
VariableDefinition = <WhiteSpace*> Variable <':'> Type DefaultValue?
SelectionSet = <'{'> Selection+ <'}'>
Selection = Field |
            FragmentSpread |
            InlineFragment
Field = <WhiteSpace*> Alias? Name Arguments? Directives? SelectionSet?
Alias = Name <':'>
Arguments = <'('> Argument+ <')'>
Argument = Name <':'> Value<Comma*>
Value = Variable |
        IntValue |
        FloatValue |
        StringValue |
        BooleanValue |
        NullValue |
        EnumValue
Variable = <'$'> Name
DefaultValue = <'='> Value
EnumValue = #"^(?!(true|false|null))[_A-Za-z][_0-9A-Za-z]*"
Directives = Directive+
Directive = <WhiteSpace*> <'@'> Name Arguments?
FragmentSpread = <WhiteSpace*> <'...'> FragmentName Directives?
FragmentName = #"^(?!on)[_A-Za-z][_0-9A-Za-z]*"
InlineFragment = <'...'> TypeCondition? Directives? SelectionSet
TypeCondition = <'on'> <WhiteSpace*> NamedType
Type = NamedType |
       ListType |
       NonNullType
NamedType = Name
ListType = <'['> Type <']'>
NonNullType = NamedType <'!'> |
              ListType <'!'>
