Document = Definition+
Definition = ExecutableDefinition |
             TypeSystemDefinition
ExecutableDefinition = OperationDefinition |
                       FragmentDefinition
TypeSystemDefinition = SchemaDefinition
SchemaDefinition = <'schema'> Directives? <'{'> RootOperationTypeDefinition+ <'}'>
RootOperationTypeDefinition = <WhiteSpace*> OperationType <':'> NamedType
OperationDefinition = (OperationType <WhiteSpace*> Name? VariableDefinitions? Directives? SelectionSet) |
                      SelectionSet
FragmentDefinition = <'fragment'> <WhiteSpace+> FragmentName <WhiteSpace+> TypeCondition Directives? SelectionSet
OperationType = 'query' | 'mutation' | 'subscription'
VariableDefinitions = <'('> VariableDefinition+ <')'>
VariableDefinition = <WhiteSpace*> Variable <':'> Type DefaultValue?
SelectionSet = <'{'> Selection+ <'}'>
Selection = Field |
            FragmentSpread |
            InlineFragment
Field = <WhiteSpace*> Alias? Name Arguments? Directives? SelectionSet?
Alias = Name <':'>
Arguments = <'('> Argument+ <')'>
Argument = Name <':'> Value<Comma*>
Value = Variable |
        IntValue |
        FloatValue |
        StringValue |
        BooleanValue |
        NullValue |
        EnumValue
Variable = <'$'> Name
DefaultValue = <'='> Value
EnumValue = #"^(?!(true|false|null))[_A-Za-z][_0-9A-Za-z]*"
Directives = Directive+
Directive = <WhiteSpace*> <'@'> Name Arguments?
FragmentSpread = <WhiteSpace*> <'...'> FragmentName Directives?
FragmentName = #"^(?!on)[_A-Za-z][_0-9A-Za-z]*"
InlineFragment = <'...'> TypeCondition? Directives? SelectionSet
TypeCondition = <'on'> <WhiteSpace*> NamedType
Type = NamedType |
       ListType |
       NonNullType
NamedType = Name
ListType = <'['> Type <']'>
NonNullType = NamedType <'!'> |
              ListType <'!'>
